
# WEBADM version for one server
#!/bin/python2.7

from subprocess import Popen, PIPE
import tempfile
import time
import datetime
import re
import os
import shutil
import filecmp

localMachine = "wwwapa2wp1"
remoteSSHPort = "22000"
localConfFile = "alfresco.rb.cz_443.conf"


apacheLogLocation = '/app/httpd/apache2/logs'
apacheBinLocation = '/app/httpd/apache2/bin'

serviceName = 'apache2'
OKText = "Syntax OK"
startMessage = "resuming normal operations"
PeriodCheckLogs = 15

apacheBaseHtdocs = ''
scriptDir = '/app/httpd/scripts'
sourceMessageFile = 'login_Messages_all.properties'
CZFinalFile = 'messageCZ.txt'
ENFinalFile = 'messageEN.txt'
apacheBase = '/app/httpd'
vhostConfDir = '%s/conf/vhosts' % (apacheBase)
vhostLinkDir = 'alfresco.rb.cz_443'
vhostAltConfDir = '%s/conf/vhosts/alfresco.rb.cz_443' % (apacheBase)
MessagePathHome = '%s/htdocs/MCH/infoMessage' % (apacheBase)
MessagePathOther = '%s/htdocs/MCH/infoMessage' % (apacheBase)
appendProvoz = ''
appendOdstavka = '_odstavka'
appendNeplanOdstavka = '_neplan_odstavka'
appendSnet = '_otevreni_test'
langTexts = ['cs','en']
outageDateFolder = '%s/htdocs/ALF/errors' % (apacheBase)
outageDateFile = 'dateTimeTo.txt'
apacheProxyConf= '/app/httpd/conf/httpd.conf'

####################

def checkLoginUser():
  import getpass
  userMy = getpass.getuser()
  #import subprocess
  #userMy = subprocess.check_output("who").split()[0]
  if userMy == 'operator':
    return True
  else:
    return False

def checkApache(isRemote,remoteUser,remoteServer,remotePort):
  if isRemote is True:
    myCommand = ["ssh", "%s@%s" % (remoteUser,remoteServer), "-p %s" % (remotePort), "%s/apachectl" % (apacheBinLocation), "-t"]
  else:
    myCommand = ["%s/apachectl" % (apacheBinLocation), "-f", "%s" % (apacheProxyConf), "-t"]
  #print (myCommand)
  command = Popen(myCommand, stdout=PIPE, stderr=PIPE)
  out,err = command.communicate()
  #print out,err
  exit = command.returncode
  if err.strip() == OKText:
    #print "INFO - Validace konfigurace apache je OK"
    #print err #dat do log
    return True
  else:
    print "!! ERROR !! - Validace konfigurace apache neprobhla uspesne - %s" % (err)
    return False

def refreshApache(isRemote,remoteUser,remoteServer,remotePort):
  if isRemote is True:
    myCommand = ["ssh", "%s@%s" % (remoteUser,remoteServer), "-p %s" % (remotePort), "sudo","/bin/systemctl","reload","apache2.service"]
  else:
    myCommand = ["sudo","/bin/systemctl","reload","apache2.service"]
  print "INFO - Provadim refresh sluzby"
  command = Popen(myCommand, stdout=PIPE, stderr=PIPE)
  out,err = command.communicate()
  exit = command.returncode
  if exit == 0:
    print "INFO - Refresh sluzby proveden"
    return True
  else:
    print "!! ERROR !! - Error pri provadeni refreshe sluzby - %s" % (err)

def actTime():
  import datetime
  today = datetime.datetime.now()
  #strTime = today.strftime('%Y-%m-%d %H:%M:%S')
  return today

def prevDateTime(dPeriod): #in seconds
  import datetime
  prev = datetime.datetime.now() - datetime.timedelta(seconds=dPeriod)
  #strTime = prev
  #strTime = datetime.datetime.strptime(prev,'%Y-%m-%d %H:%M:%S')
  return prev

def findLocalIfLogIsOk(dStartMessage,dPeriod):
  print "INFO - Provadim kontrolu logu po refresh sluzby"
  end = actTime()
  start = prevDateTime(dPeriod)
  k = open("%s/error.log" % (apacheLogLocation))
  for oneLine in reversed(k.readlines()):
    if re.search(dStartMessage,oneLine):
      entryTime = '%s %s %s %s' % (oneLine.split(']')[0].split(' ')[4],oneLine.split(']')[0].split(' ')[1],oneLine.split(']')[0].split(' ')[2],oneLine.split(']')[0].split(' ')[3])
      #print entryTime.split('.')[0].strip()
      break
  entryTimeAsObject = datetime.datetime.strptime(entryTime.split('.')[0].strip(),'%Y %b %d %H:%M:%S')
  if start <= entryTimeAsObject <= end:
    print "INFO - Kontrola logu po refresh OK"
    return True
  else:
    print "!! ERROR !! - Kontrola logu po refresh neprobehla uspesne"
    return False

def checkActualFile (dPath):
  if os.path.isfile(dPath):
    if os.stat(dPath).st_size == 0:
      print "Zadna aktualni hlaska"
    else:
      openFile = open(dPath,'r')
      for oneLine in openFile.readlines():
        print oneLine
      openFile.close()

def syncBothNodesFile(dDir,dFile,remoteUser,remoteServer,remotePort,remoteDir):
  k = True
  print "INFO - Synchronizuji soubor %s se remote serverem ..." % (dFile)
  if os.path.isfile(os.path.join(dDir,dFile)):
    myCommand = ["scp", "-P %s" % (remotePort), os.path.join(dDir,dFile), "%s@%s:%s" % (remoteUser,remoteServer,remoteDir)]
    command = Popen(myCommand, stdout=PIPE, stderr=PIPE)
    out,err = command.communicate()
    exit = command.returncode
    if exit == 0:
      print "INFO - Soubor %s prenesen na remote server" % (dFile)
    else:
      print "!! ERROR !! - Nepodarilo se prenest soubor %s na remote server" % (dFile)
      k = False
  return k

def syncBothNodesDir(dDir,remoteUser,remoteServer,remotePort,remoteDir):
  k = True
  print "INFO - Synchronizuji oba web nody ..."
  mySyncFiles = os.listdir(dDir)
  for oneMember in mySyncFiles:
    print oneMember
    if os.path.isfile(os.path.join(dDir,oneMember)):
      myCommand = ["scp", "-P %s" % (remotePort), os.path.join(dDir,oneMember), "%s@%s:%s" % (remoteUser,remoteServer,remoteDir)]
      command = Popen(myCommand, stdout=PIPE, stderr=PIPE)
      out,err = command.communicate()
      exit = command.returncode
      if exit == 0:
        print "Soubor %s OK" % (oneMember)
      else:
        k = False
  return k

def chooseTextFromSourceFile(dsourceMessageFile,dNum,dLang):
  mytext = ''
  openFile = open(dsourceMessageFile,'r')
  for oneLine in openFile.readlines():
    if re.search('^login-message\.%s\.%s' % (dNum,dLang),oneLine):
      myText = oneLine.split('=')[1].strip()
      break
  return myText
  openFile.close()

def writeTextToFile(dFilePath,dFileName,dText):
  openFile = open(os.path.join(dFilePath,dFileName),'w')
  if openFile:
    if len(dText) > 1:
      openFile.write(dText)
    openFile.close()
    return True

def changeLocalConfFileTo(dWhat,dConfDir,DAltConfDir,DvhostLinkDir,dChangedFile): # "P" to provoz, "O" to odstavka, "NO" to neplanovana odstavka
  if dWhat == "O":
    if os.path.islink(os.path.join(dConfDir,dChangedFile)):
      if os.path.isfile(os.path.join(DAltConfDir,'%s%s' % (dChangedFile,appendOdstavka))):
        #shutil.copyfile(os.path.join(dConfDir,dChangedFile),os.path.join(DAltConfDir,'%s%s' % (dChangedFile,appendProvoz)))
        #print "INFO - Backup conf souboru proveden"
        os.unlink(os.path.join(dConfDir,dChangedFile))
        if not os.path.islink(os.path.join(dConfDir,dChangedFile)):
          os.chdir(dConfDir)
          os.symlink('%s/%s%s' % (DvhostLinkDir,dChangedFile,appendOdstavka), os.path.join(dConfDir,dChangedFile))
          if os.path.islink(os.path.join(dConfDir,dChangedFile)):
            print "INFO - Zmena conf souboru %s na planovanou odstavku OK" % (dChangedFile)
            return True
          else:
            print "!! ERROR !! - Zmena conf souboru %s se nepodarila" % (dChangedFile)
        else:
          print "!! ERROR !! - Nepodarilo se odstrani symlink %s" % (os.path.join(dConfDir,dChangedFile))
      else:
        print "!! ERROR !! - %s neexistuje, nelze pokracovat" % (os.path.join(DAltConfDir,'%s%s' % (dChangedFile,appendOdstavka)))
        return False
    else:
      print "!! ERROR !! - %s neexistuje, nelze pokracovat" % (os.path.join(dConfDir,dChangedFile))
      return False


  if dWhat == "P":
    if os.path.islink(os.path.join(dConfDir,dChangedFile)):
      if os.path.isfile(os.path.join(DAltConfDir,'%s%s' % (dChangedFile,appendProvoz))):
        os.unlink(os.path.join(dConfDir,dChangedFile))
        if not os.path.islink(os.path.join(dConfDir,dChangedFile)):
          os.chdir(dConfDir)
          os.symlink('%s/%s%s' % (DvhostLinkDir,dChangedFile,appendProvoz), os.path.join(dConfDir,dChangedFile))
          if os.path.islink(os.path.join(dConfDir,dChangedFile)):
            print "INFO - Zmena conf souboru %s na planovanou odstavku OK" % (dChangedFile)
            return True
          else:
            print "!! ERROR !! - Zmena conf souboru %s se nepodarila" % (dChangedFile)
        else:
          print "!! ERROR !! - Nepodarilo se odstrani symlink %s" % (os.path.join(dConfDir,dChangedFile))
      else:
        print "!! ERROR !! - %s neexistuje, nelze pokracovat" % (os.path.join(DAltConfDir,'%s%s' % (dChangedFile,appendOdstavka)))
        return False
    else:
      print "!! ERROR !! - %s neexistuje, nelze pokracovat" % (os.path.join(dConfDir,dChangedFile))
      return False

  if dWhat == "S":
    if os.path.islink(os.path.join(dConfDir,dChangedFile)):
      if os.path.isfile(os.path.join(DAltConfDir,'%s%s' % (dChangedFile,appendProvoz))):
        os.unlink(os.path.join(dConfDir,dChangedFile))
        if not os.path.islink(os.path.join(dConfDir,dChangedFile)):
          os.chdir(dConfDir)
          os.symlink('%s/%s%s' % (DvhostLinkDir,dChangedFile,appendSnet), os.path.join(dConfDir,dChangedFile))
          if os.path.islink(os.path.join(dConfDir,dChangedFile)):
            print "INFO - Zmena conf souboru %s na planovanou odstavku OK" % (dChangedFile)
            return True
          else:
            print "!! ERROR !! - Zmena conf souboru %s se nepodarila" % (dChangedFile)
        else:
          print "!! ERROR !! - Nepodarilo se odstrani symlink %s" % (os.path.join(dConfDir,dChangedFile))
      else:
        print "!! ERROR !! - %s neexistuje, nelze pokracovat" % (os.path.join(DAltConfDir,'%s%s' % (dChangedFile,appendOdstavka)))
        return False
    else:
      print "!! ERROR !! - %s neexistuje, nelze pokracovat" % (os.path.join(dConfDir,dChangedFile))
      return False

  if dWhat == "NO":
    if os.path.islink(os.path.join(dConfDir,dChangedFile)):
      if os.path.isfile(os.path.join(DAltConfDir,'%s%s' % (dChangedFile,appendNeplanOdstavka))):
        os.unlink(os.path.join(dConfDir,dChangedFile))
        if not os.path.islink(os.path.join(dConfDir,dChangedFile)):
          os.chdir(dConfDir)
          os.symlink('%s/%s%s' % (DvhostLinkDir,dChangedFile,appendNeplanOdstavka), os.path.join(dConfDir,dChangedFile))
          if os.path.islink(os.path.join(dConfDir,dChangedFile)):
            print "INFO - Zmena conf souboru %s na planovanou odstavku OK" % (dChangedFile)
            return True
          else:
            print "!! ERROR !! - Zmena conf souboru %s se nepodarila" % (dChangedFile)
        else:
          print "!! ERROR !! - Nepodarilo se odstrani symlink %s" % (os.path.join(dConfDir,dChangedFile))
      else:
        print "!! ERROR !! - %s neexistuje, nelze pokracovat" % (os.path.join(DAltConfDir,'%s%s' % (dChangedFile,appendOdstavka)))
        return False
    else:
      print "!! ERROR !! - %s neexistuje, nelze pokracovat" % (os.path.join(dConfDir,dChangedFile))
      return False

def changeRemoteConfFileTo(dWhat,dConfDir,DAltConfDir,DvhostLinkDir,dChangedFile,dremoteUser,dremoteServer,dremotePort): # "P" to provoz, "O" to odstavka, "NO" to neplanovana odstavka
  if dWhat == "O":
    myCommand = ["ssh", "%s@%s" % (dremoteUser,dremoteServer), "-p %s" % (dremotePort), 'if [ -L %s ];\n then \n if [ -f %s ];\n then \n unlink %s && cd %s && ln -s %s %s && echo "True";\n else\n echo "False";\n fi \n else\n echo "False;"\n fi ' % (os.path.join(dConfDir,dChangedFile),os.path.join(DAltConfDir,'%s%s' % (dChangedFile,appendOdstavka)),os.path.join(dConfDir,dChangedFile),dConfDir,'%s/%s%s' % (DvhostLinkDir,dChangedFile,appendOdstavka),os.path.join(dConfDir,dChangedFile))]
    command = Popen(myCommand, stdout=PIPE, stderr=PIPE)
    out,err = command.communicate()
    if out.strip() == "True":
      print "INFO - Zmena conf souboru %s na planovanou odstavku OK" % (dChangedFile)
      return True
    if out.strip() == "False":
      print "!! ERROR !! - Zmena conf souboru neprobehla - %s" % (dChangedFile)
      return False
  if dWhat == "P":
    myCommand = ["ssh", "%s@%s" % (dremoteUser,dremoteServer), "-p %s" % (dremotePort), 'if [ -L %s ];\n then \n if [ -f %s ];\n then \n unlink %s && cd %s && ln -s %s %s && echo "True";\n else\n echo "False";\n fi \n else\n echo "False;"\n fi ' % (os.path.join(dConfDir,dChangedFile),os.path.join(DAltConfDir,'%s%s' % (dChangedFile,appendProvoz)),os.path.join(dConfDir,dChangedFile),dConfDir,'%s/%s%s' % (DvhostLinkDir,dChangedFile,appendProvoz),os.path.join(dConfDir,dChangedFile))]
    command = Popen(myCommand, stdout=PIPE, stderr=PIPE)
    out,err = command.communicate()
    if out.strip() == "True":
      print "INFO - Zmena conf souboru %s na provoz OK" % (dChangedFile)
      return True
    if out.strip() == "False":
      print "!! ERROR !! - Zmena conf souboru neprohla - %s" % (dChangedFile)
      return False
  if dWhat == "NO":
    myCommand = ["ssh", "%s@%s" % (dremoteUser,dremoteServer), "-p %s" % (dremotePort), 'if [ -L %s ];\n then \n if [ -f %s ];\n then \n unlink %s && cd %s && ln -s %s %s && echo "True";\n else\n echo "False";\n fi \n else\n echo "False;"\n fi ' % (os.path.join(dConfDir,dChangedFile),os.path.join(DAltConfDir,'%s%s' % (dChangedFile,appendNeplanOdstavka)),os.path.join(dConfDir,dChangedFile),dConfDir,'%s/%s%s' % (DvhostLinkDir,dChangedFile,appendNeplanOdstavka),os.path.join(dConfDir,dChangedFile))]
    command = Popen(myCommand, stdout=PIPE, stderr=PIPE)
    out,err = command.communicate()
    if out.strip() == "True":
      print "INFO - Zmena conf souboru %s na neplanovany vypadek OK" % (dChangedFile)
      return True
    if out.strip() == "False":
      print "!! ERROR !! - Zmena conf souboru neprobehla - %s" % (dChangedFile)
      return False

#############################################################################
#############################################################################
print "\n##################################################\n"
print "Aktualne vystavena hlaska:"
checkActualFile ('%s/%s' % (MessagePathHome,CZFinalFile))
ans=True
while ans:
  print ("""

010 - Alfresco - Probihajici planovany vypadek + cas navratu do normalu
013 - Alfresco - Navrat do normalu

Vyber moznost:
  """)
  ans=raw_input("Zadej volbu?\n")

  if ans.strip() == "010":
    dateTo=raw_input("Zadej datum ukonceni odstavky (den.mesic.rok):\n")
    timeTo=raw_input("Zadej cas ukonceni odstavky (hodina:minuty):\n")
    if writeTextToFile(outageDateFolder,outageDateFile,'%s %s' % (dateTo,timeTo)):
      tmp = False
      print "INFO - Vystaveni odstavkove stranky - local"
      if changeLocalConfFileTo("O",vhostConfDir,vhostAltConfDir,vhostLinkDir,localConfFile):
        if checkApache(False,"","",""):
          print "INFO - Kontrola konfigurace apache OK"
          if refreshApache(False,"","",""):
            print "INFO - Cekam na zpracovani zaznamu v logu ..."
            time.sleep(5)
            if findLocalIfLogIsOk(startMessage,PeriodCheckLogs):
              print "INFO - Refresh apache na lokalnim serveru je OK"
              tmp = True
            else:
              print "WARNING - Kontrola logu po refresh apache neprobehla uspesne"
    break

  elif ans.strip() == "013":
    tmp = False
    print "INFO - Zruseni odstavkove stranky - local"
    if changeLocalConfFileTo("P",vhostConfDir,vhostAltConfDir,vhostLinkDir,localConfFile):
        if checkApache(False,"","",""):
          print "INFO - Kontrola konfigurace apache OK"
          if refreshApache(False,"","",""):
            print "INFO - Cekam na zpracovani zaznamu v logu ..."
            time.sleep(5)
            if findLocalIfLogIsOk(startMessage,PeriodCheckLogs):
              print "INFO - Refresh apache na lokalnim serveru je OK"
              tmp = True
            else:
              print "WARNING - Kontrola logu po refresh apache neprobehla uspesne"
    break

  elif ans !="":
    print("\n WARNING - Neplatna volba")


if ans in ["000","001","002","004","005","011","012","013","017","020","021","X"] and checkLoginUser() == True:
  ret = syncBothNodesDir(MessagePathHome,remoteUser,remoteMachine,remoteSSHPort,MessagePathOther)

print "Done"
